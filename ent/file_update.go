// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-file/ent/file"
	"github.com/suyuan32/simple-admin-file/ent/filetag"
	"github.com/suyuan32/simple-admin-file/ent/predicate"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetStatus sets the "status" field.
func (fu *FileUpdate) SetStatus(u uint8) *FileUpdate {
	fu.mutation.ResetStatus()
	fu.mutation.SetStatus(u)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FileUpdate) SetNillableStatus(u *uint8) *FileUpdate {
	if u != nil {
		fu.SetStatus(*u)
	}
	return fu
}

// AddStatus adds u to the "status" field.
func (fu *FileUpdate) AddStatus(u int8) *FileUpdate {
	fu.mutation.AddStatus(u)
	return fu
}

// ClearStatus clears the value of the "status" field.
func (fu *FileUpdate) ClearStatus() *FileUpdate {
	fu.mutation.ClearStatus()
	return fu
}

// SetCreateId sets the "createId" field.
func (fu *FileUpdate) SetCreateId(s string) *FileUpdate {
	fu.mutation.SetCreateId(s)
	return fu
}

// SetNillableCreateId sets the "createId" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreateId(s *string) *FileUpdate {
	if s != nil {
		fu.SetCreateId(*s)
	}
	return fu
}

// SetDepartmentId sets the "departmentId" field.
func (fu *FileUpdate) SetDepartmentId(s string) *FileUpdate {
	fu.mutation.SetDepartmentId(s)
	return fu
}

// SetNillableDepartmentId sets the "departmentId" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDepartmentId(s *string) *FileUpdate {
	if s != nil {
		fu.SetDepartmentId(*s)
	}
	return fu
}

// SetCategoryID sets the "category_id" field.
func (fu *FileUpdate) SetCategoryID(i int) *FileUpdate {
	fu.mutation.ResetCategoryID()
	fu.mutation.SetCategoryID(i)
	return fu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCategoryID(i *int) *FileUpdate {
	if i != nil {
		fu.SetCategoryID(*i)
	}
	return fu
}

// AddCategoryID adds i to the "category_id" field.
func (fu *FileUpdate) AddCategoryID(i int) *FileUpdate {
	fu.mutation.AddCategoryID(i)
	return fu
}

// SetName sets the "name" field.
func (fu *FileUpdate) SetName(s string) *FileUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableName(s *string) *FileUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetFileType sets the "file_type" field.
func (fu *FileUpdate) SetFileType(u uint8) *FileUpdate {
	fu.mutation.ResetFileType()
	fu.mutation.SetFileType(u)
	return fu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFileType(u *uint8) *FileUpdate {
	if u != nil {
		fu.SetFileType(*u)
	}
	return fu
}

// AddFileType adds u to the "file_type" field.
func (fu *FileUpdate) AddFileType(u int8) *FileUpdate {
	fu.mutation.AddFileType(u)
	return fu
}

// SetSize sets the "size" field.
func (fu *FileUpdate) SetSize(u uint64) *FileUpdate {
	fu.mutation.ResetSize()
	fu.mutation.SetSize(u)
	return fu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSize(u *uint64) *FileUpdate {
	if u != nil {
		fu.SetSize(*u)
	}
	return fu
}

// AddSize adds u to the "size" field.
func (fu *FileUpdate) AddSize(u int64) *FileUpdate {
	fu.mutation.AddSize(u)
	return fu
}

// SetPath sets the "path" field.
func (fu *FileUpdate) SetPath(s string) *FileUpdate {
	fu.mutation.SetPath(s)
	return fu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fu *FileUpdate) SetNillablePath(s *string) *FileUpdate {
	if s != nil {
		fu.SetPath(*s)
	}
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FileUpdate) SetUserID(s string) *FileUpdate {
	fu.mutation.SetUserID(s)
	return fu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fu *FileUpdate) SetNillableUserID(s *string) *FileUpdate {
	if s != nil {
		fu.SetUserID(*s)
	}
	return fu
}

// SetMd5 sets the "md5" field.
func (fu *FileUpdate) SetMd5(s string) *FileUpdate {
	fu.mutation.SetMd5(s)
	return fu
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (fu *FileUpdate) SetNillableMd5(s *string) *FileUpdate {
	if s != nil {
		fu.SetMd5(*s)
	}
	return fu
}

// AddTagIDs adds the "tags" edge to the FileTag entity by IDs.
func (fu *FileUpdate) AddTagIDs(ids ...uint64) *FileUpdate {
	fu.mutation.AddTagIDs(ids...)
	return fu
}

// AddTags adds the "tags" edges to the FileTag entity.
func (fu *FileUpdate) AddTags(f ...*FileTag) *FileUpdate {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddTagIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearTags clears all "tags" edges to the FileTag entity.
func (fu *FileUpdate) ClearTags() *FileUpdate {
	fu.mutation.ClearTags()
	return fu
}

// RemoveTagIDs removes the "tags" edge to FileTag entities by IDs.
func (fu *FileUpdate) RemoveTagIDs(ids ...uint64) *FileUpdate {
	fu.mutation.RemoveTagIDs(ids...)
	return fu
}

// RemoveTags removes "tags" edges to FileTag entities.
func (fu *FileUpdate) RemoveTags(f ...*FileTag) *FileUpdate {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(file.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.AddedStatus(); ok {
		_spec.AddField(file.FieldStatus, field.TypeUint8, value)
	}
	if fu.mutation.StatusCleared() {
		_spec.ClearField(file.FieldStatus, field.TypeUint8)
	}
	if value, ok := fu.mutation.CreateId(); ok {
		_spec.SetField(file.FieldCreateId, field.TypeString, value)
	}
	if value, ok := fu.mutation.DepartmentId(); ok {
		_spec.SetField(file.FieldDepartmentId, field.TypeString, value)
	}
	if value, ok := fu.mutation.CategoryID(); ok {
		_spec.SetField(file.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedCategoryID(); ok {
		_spec.AddField(file.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.FileType(); ok {
		_spec.SetField(file.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.AddedFileType(); ok {
		_spec.AddField(file.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fu.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fu.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fu.mutation.UserID(); ok {
		_spec.SetField(file.FieldUserID, field.TypeString, value)
	}
	if value, ok := fu.mutation.Md5(); ok {
		_spec.SetField(file.FieldMd5, field.TypeString, value)
	}
	if fu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TagsTable,
			Columns: file.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !fu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TagsTable,
			Columns: file.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TagsTable,
			Columns: file.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FileUpdateOne) SetStatus(u uint8) *FileUpdateOne {
	fuo.mutation.ResetStatus()
	fuo.mutation.SetStatus(u)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableStatus(u *uint8) *FileUpdateOne {
	if u != nil {
		fuo.SetStatus(*u)
	}
	return fuo
}

// AddStatus adds u to the "status" field.
func (fuo *FileUpdateOne) AddStatus(u int8) *FileUpdateOne {
	fuo.mutation.AddStatus(u)
	return fuo
}

// ClearStatus clears the value of the "status" field.
func (fuo *FileUpdateOne) ClearStatus() *FileUpdateOne {
	fuo.mutation.ClearStatus()
	return fuo
}

// SetCreateId sets the "createId" field.
func (fuo *FileUpdateOne) SetCreateId(s string) *FileUpdateOne {
	fuo.mutation.SetCreateId(s)
	return fuo
}

// SetNillableCreateId sets the "createId" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreateId(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetCreateId(*s)
	}
	return fuo
}

// SetDepartmentId sets the "departmentId" field.
func (fuo *FileUpdateOne) SetDepartmentId(s string) *FileUpdateOne {
	fuo.mutation.SetDepartmentId(s)
	return fuo
}

// SetNillableDepartmentId sets the "departmentId" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDepartmentId(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetDepartmentId(*s)
	}
	return fuo
}

// SetCategoryID sets the "category_id" field.
func (fuo *FileUpdateOne) SetCategoryID(i int) *FileUpdateOne {
	fuo.mutation.ResetCategoryID()
	fuo.mutation.SetCategoryID(i)
	return fuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCategoryID(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetCategoryID(*i)
	}
	return fuo
}

// AddCategoryID adds i to the "category_id" field.
func (fuo *FileUpdateOne) AddCategoryID(i int) *FileUpdateOne {
	fuo.mutation.AddCategoryID(i)
	return fuo
}

// SetName sets the "name" field.
func (fuo *FileUpdateOne) SetName(s string) *FileUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetFileType sets the "file_type" field.
func (fuo *FileUpdateOne) SetFileType(u uint8) *FileUpdateOne {
	fuo.mutation.ResetFileType()
	fuo.mutation.SetFileType(u)
	return fuo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFileType(u *uint8) *FileUpdateOne {
	if u != nil {
		fuo.SetFileType(*u)
	}
	return fuo
}

// AddFileType adds u to the "file_type" field.
func (fuo *FileUpdateOne) AddFileType(u int8) *FileUpdateOne {
	fuo.mutation.AddFileType(u)
	return fuo
}

// SetSize sets the "size" field.
func (fuo *FileUpdateOne) SetSize(u uint64) *FileUpdateOne {
	fuo.mutation.ResetSize()
	fuo.mutation.SetSize(u)
	return fuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSize(u *uint64) *FileUpdateOne {
	if u != nil {
		fuo.SetSize(*u)
	}
	return fuo
}

// AddSize adds u to the "size" field.
func (fuo *FileUpdateOne) AddSize(u int64) *FileUpdateOne {
	fuo.mutation.AddSize(u)
	return fuo
}

// SetPath sets the "path" field.
func (fuo *FileUpdateOne) SetPath(s string) *FileUpdateOne {
	fuo.mutation.SetPath(s)
	return fuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillablePath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetPath(*s)
	}
	return fuo
}

// SetUserID sets the "user_id" field.
func (fuo *FileUpdateOne) SetUserID(s string) *FileUpdateOne {
	fuo.mutation.SetUserID(s)
	return fuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUserID(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetUserID(*s)
	}
	return fuo
}

// SetMd5 sets the "md5" field.
func (fuo *FileUpdateOne) SetMd5(s string) *FileUpdateOne {
	fuo.mutation.SetMd5(s)
	return fuo
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableMd5(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetMd5(*s)
	}
	return fuo
}

// AddTagIDs adds the "tags" edge to the FileTag entity by IDs.
func (fuo *FileUpdateOne) AddTagIDs(ids ...uint64) *FileUpdateOne {
	fuo.mutation.AddTagIDs(ids...)
	return fuo
}

// AddTags adds the "tags" edges to the FileTag entity.
func (fuo *FileUpdateOne) AddTags(f ...*FileTag) *FileUpdateOne {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddTagIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearTags clears all "tags" edges to the FileTag entity.
func (fuo *FileUpdateOne) ClearTags() *FileUpdateOne {
	fuo.mutation.ClearTags()
	return fuo
}

// RemoveTagIDs removes the "tags" edge to FileTag entities by IDs.
func (fuo *FileUpdateOne) RemoveTagIDs(ids ...uint64) *FileUpdateOne {
	fuo.mutation.RemoveTagIDs(ids...)
	return fuo
}

// RemoveTags removes "tags" edges to FileTag entities.
func (fuo *FileUpdateOne) RemoveTags(f ...*FileTag) *FileUpdateOne {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(file.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.AddedStatus(); ok {
		_spec.AddField(file.FieldStatus, field.TypeUint8, value)
	}
	if fuo.mutation.StatusCleared() {
		_spec.ClearField(file.FieldStatus, field.TypeUint8)
	}
	if value, ok := fuo.mutation.CreateId(); ok {
		_spec.SetField(file.FieldCreateId, field.TypeString, value)
	}
	if value, ok := fuo.mutation.DepartmentId(); ok {
		_spec.SetField(file.FieldDepartmentId, field.TypeString, value)
	}
	if value, ok := fuo.mutation.CategoryID(); ok {
		_spec.SetField(file.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedCategoryID(); ok {
		_spec.AddField(file.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FileType(); ok {
		_spec.SetField(file.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.AddedFileType(); ok {
		_spec.AddField(file.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fuo.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fuo.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fuo.mutation.UserID(); ok {
		_spec.SetField(file.FieldUserID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Md5(); ok {
		_spec.SetField(file.FieldMd5, field.TypeString, value)
	}
	if fuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TagsTable,
			Columns: file.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !fuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TagsTable,
			Columns: file.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TagsTable,
			Columns: file.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
